//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Codes/player_movement_input_action.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_movement_input_action: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_movement_input_action()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""player_movement_input_action"",
    ""maps"": [
        {
            ""name"": ""player_movement "",
            ""id"": ""c403eb29-6b7f-43e7-ad9e-2ed7b130826e"",
            ""actions"": [
                {
                    ""name"": ""crouch"",
                    ""type"": ""Button"",
                    ""id"": ""67c5b72f-c971-4b0d-aa91-630f3ea6bb85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""3c4e3605-4412-4961-acaa-3f716f17ea2a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""inventory "",
                    ""type"": ""Button"",
                    ""id"": ""05602e5e-f950-4398-949d-f4306d363290"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8925d5f6-2de2-4481-85b4-6de154451610"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""911dad6a-3a3d-4878-ac91-711f77b8cca5"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c69cdc91-7209-4ebd-80b1-d33888b90c36"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1ecf3635-02ac-47b9-8474-89a707bdf0d5"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dcfee310-43ea-4882-a229-f5307b594c27"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""69ca89aa-ee2a-4365-827d-05aab130fe26"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""368f9cd8-1908-4d8d-95e1-8124056f5ced"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""keybord"",
                    ""id"": ""721f1c78-13d7-4617-a4a6-21118d732a15"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""aae7f4b0-ff5e-4e86-ad2b-d2eb3b9e8124"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c4a3edf1-6847-455e-a00d-092dc40ea439"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d600795f-4722-44f6-bc3d-8291631cf08c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""68aa036b-b2a8-49a7-bd58-ba9d2d46d073"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fb5631a8-7875-4f40-b389-e575cb9364d6"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""inventory "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // player_movement 
        m_player_movement = asset.FindActionMap("player_movement ", throwIfNotFound: true);
        m_player_movement_crouch = m_player_movement.FindAction("crouch", throwIfNotFound: true);
        m_player_movement_movement = m_player_movement.FindAction("movement", throwIfNotFound: true);
        m_player_movement_inventory = m_player_movement.FindAction("inventory ", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player_movement 
    private readonly InputActionMap m_player_movement;
    private List<IPlayer_movementActions> m_Player_movementActionsCallbackInterfaces = new List<IPlayer_movementActions>();
    private readonly InputAction m_player_movement_crouch;
    private readonly InputAction m_player_movement_movement;
    private readonly InputAction m_player_movement_inventory;
    public struct Player_movementActions
    {
        private @Player_movement_input_action m_Wrapper;
        public Player_movementActions(@Player_movement_input_action wrapper) { m_Wrapper = wrapper; }
        public InputAction @crouch => m_Wrapper.m_player_movement_crouch;
        public InputAction @movement => m_Wrapper.m_player_movement_movement;
        public InputAction @inventory => m_Wrapper.m_player_movement_inventory;
        public InputActionMap Get() { return m_Wrapper.m_player_movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_movementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_movementActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_movementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_movementActionsCallbackInterfaces.Add(instance);
            @crouch.started += instance.OnCrouch;
            @crouch.performed += instance.OnCrouch;
            @crouch.canceled += instance.OnCrouch;
            @movement.started += instance.OnMovement;
            @movement.performed += instance.OnMovement;
            @movement.canceled += instance.OnMovement;
            @inventory.started += instance.OnInventory;
            @inventory.performed += instance.OnInventory;
            @inventory.canceled += instance.OnInventory;
        }

        private void UnregisterCallbacks(IPlayer_movementActions instance)
        {
            @crouch.started -= instance.OnCrouch;
            @crouch.performed -= instance.OnCrouch;
            @crouch.canceled -= instance.OnCrouch;
            @movement.started -= instance.OnMovement;
            @movement.performed -= instance.OnMovement;
            @movement.canceled -= instance.OnMovement;
            @inventory.started -= instance.OnInventory;
            @inventory.performed -= instance.OnInventory;
            @inventory.canceled -= instance.OnInventory;
        }

        public void RemoveCallbacks(IPlayer_movementActions instance)
        {
            if (m_Wrapper.m_Player_movementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_movementActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_movementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_movementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_movementActions @player_movement => new Player_movementActions(this);
    public interface IPlayer_movementActions
    {
        void OnCrouch(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
    }
}
